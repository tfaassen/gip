{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teun.faassen\\\\gip\\\\gip_project\\\\geozoekkr\\\\geozoekkr-frontend\\\\src\\\\pages\\\\Locatie.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"styles/style_locatie.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Locatie = () => {\n  _s();\n  const [timer, setTimer] = useState(150);\n  const [selectedCoordinates, setSelectedCoordinates] = useState(null);\n  const [streetViewStartCoordinates, setStreetViewStartCoordinates] = useState(null);\n  const [panorama, setPanorama] = useState(null);\n  const [mapExpanded, setMapExpanded] = useState(false);\n  const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  const timerInterval = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (!window.google) {\n      const script = document.createElement(\"script\");\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap`;\n      script.async = true;\n      document.body.appendChild(script);\n      script.onload = () => {\n        window.initMap();\n      };\n    } else {\n      window.initMap();\n    }\n    return () => {\n      clearInterval(timerInterval.current);\n    };\n  }, [apiKey]);\n  window.initMap = () => {\n    const streetViewService = new google.maps.StreetViewService();\n    const startCoordinates = {\n      lat: 52.379189,\n      lng: 4.900826\n    };\n    let map;\n    let marker = null;\n    function getRandomLocation() {\n      const lat = (Math.random() * 180 - 90).toFixed(6);\n      const lng = (Math.random() * 360 - 180).toFixed(6);\n      return {\n        lat: parseFloat(lat),\n        lng: parseFloat(lng)\n      };\n    }\n    function loadStreetView(location) {\n      streetViewService.getPanorama({\n        location,\n        radius: 5000\n      }, (data, status) => {\n        if (status === google.maps.StreetViewStatus.OK) {\n          setStreetViewStartCoordinates({\n            lat: data.location.latLng.lat(),\n            lng: data.location.latLng.lng()\n          });\n          const panoramaInstance = new google.maps.StreetViewPanorama(document.getElementById(\"street-view\"), {\n            position: data.location.latLng,\n            pov: {\n              heading: 0,\n              pitch: 0\n            },\n            zoom: 1,\n            fullscreenControl: false,\n            enableCloseButton: false,\n            addressControl: false,\n            linksControl: false,\n            showRoadLabels: false\n          });\n          setPanorama(panoramaInstance);\n          startTimer();\n        } else {\n          findRandomStreetView();\n        }\n      });\n    }\n    function findRandomStreetView() {\n      loadStreetView(getRandomLocation());\n    }\n    function startTimer() {\n      timerInterval.current = setInterval(() => {\n        setTimer(prev => {\n          if (prev <= 1) {\n            clearInterval(timerInterval.current);\n            lockStreetView();\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n    }\n    function lockStreetView() {\n      if (panorama) {\n        panorama.setOptions({\n          disableDefaultUI: true,\n          draggable: false,\n          linksControl: false,\n          motionTracking: false,\n          motionTrackingControl: false,\n          clickToGo: false,\n          keyboardShortcuts: false\n        });\n        alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\n      }\n    }\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n      zoom: 1,\n      center: startCoordinates,\n      disableDefaultUI: true\n    });\n    map.addListener(\"click\", event => {\n      if (marker) {\n        marker.setPosition(event.latLng);\n      } else {\n        marker = new google.maps.Marker({\n          position: event.latLng,\n          map: map\n        });\n      }\n      setSelectedCoordinates({\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      });\n    });\n    findRandomStreetView();\n  };\n  function calculateDistance(coord1, coord2) {\n    const R = 6371;\n    const dLat = (coord2.lat - coord1.lat) * Math.PI / 180;\n    const dLng = (coord2.lng - coord1.lng) * Math.PI / 180;\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(coord1.lat * Math.PI / 180) * Math.cos(coord2.lat * Math.PI / 180) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));\n  }\n  function handleSearch() {\n    if (selectedCoordinates && streetViewStartCoordinates) {\n      const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\n      navigate(\"/resultaat\", {\n        state: {\n          distance: distance.toFixed(2),\n          startCoords: streetViewStartCoordinates,\n          selectedCoords: selectedCoordinates\n        }\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timer-container\",\n      children: [\"Tijd over: \", Math.floor(timer / 60), \":\", (timer % 60).toString().padStart(2, \"0\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"street-view\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-container\",\n      className: mapExpanded ? \"expanded\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"toggle-map-btn\",\n        onClick: () => setMapExpanded(!mapExpanded),\n        children: \"\\uD83D\\uDDFA\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), selectedCoordinates && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"distance-btn\",\n      onClick: handleSearch,\n      children: \"Bekijk Afstand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Locatie, \"2RtRt6fl/MZP6GpBgWRV+m3RV+Q=\", false, function () {\n  return [useNavigate];\n});\n_c = Locatie;\nexport default Locatie;\nvar _c;\n$RefreshReg$(_c, \"Locatie\");","map":{"version":3,"names":["useEffect","useState","useRef","useNavigate","jsxDEV","_jsxDEV","Locatie","_s","timer","setTimer","selectedCoordinates","setSelectedCoordinates","streetViewStartCoordinates","setStreetViewStartCoordinates","panorama","setPanorama","mapExpanded","setMapExpanded","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","timerInterval","navigate","window","google","script","document","createElement","src","async","body","appendChild","onload","initMap","clearInterval","current","streetViewService","maps","StreetViewService","startCoordinates","lat","lng","map","marker","getRandomLocation","Math","random","toFixed","parseFloat","loadStreetView","location","getPanorama","radius","data","status","StreetViewStatus","OK","latLng","panoramaInstance","StreetViewPanorama","getElementById","position","pov","heading","pitch","zoom","fullscreenControl","enableCloseButton","addressControl","linksControl","showRoadLabels","startTimer","findRandomStreetView","setInterval","prev","lockStreetView","setOptions","disableDefaultUI","draggable","motionTracking","motionTrackingControl","clickToGo","keyboardShortcuts","alert","Map","center","addListener","event","setPosition","Marker","calculateDistance","coord1","coord2","R","dLat","PI","dLng","a","sin","cos","atan2","sqrt","handleSearch","distance","state","startCoords","selectedCoords","className","children","id","floor","toString","padStart","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/teun.faassen/gip/gip_project/geozoekkr/geozoekkr-frontend/src/pages/Locatie.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"styles/style_locatie.css\";\r\n\r\nconst Locatie = () => {\r\n  const [timer, setTimer] = useState(150);\r\n  const [selectedCoordinates, setSelectedCoordinates] = useState(null);\r\n  const [streetViewStartCoordinates, setStreetViewStartCoordinates] = useState(null);\r\n  const [panorama, setPanorama] = useState(null);\r\n  const [mapExpanded, setMapExpanded] = useState(false);\r\n  const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n  const timerInterval = useRef(null);\r\n  const navigate = useNavigate();\r\n  \r\n  useEffect(() => {\r\n    if (!window.google) {\r\n      const script = document.createElement(\"script\");\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMap`;\r\n      script.async = true;\r\n      document.body.appendChild(script);\r\n      script.onload = () => {\r\n        window.initMap();\r\n      };\r\n    } else {\r\n      window.initMap();\r\n    }\r\n    return () => {\r\n      clearInterval(timerInterval.current);\r\n    };\r\n  }, [apiKey]);\r\n\r\n  window.initMap = () => {\r\n    const streetViewService = new google.maps.StreetViewService();\r\n    const startCoordinates = { lat: 52.379189, lng: 4.900826 };\r\n    let map;\r\n    let marker = null;\r\n    \r\n    function getRandomLocation() {\r\n      const lat = (Math.random() * 180 - 90).toFixed(6);\r\n      const lng = (Math.random() * 360 - 180).toFixed(6);\r\n      return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n    }\r\n\r\n    function loadStreetView(location) {\r\n      streetViewService.getPanorama({ location, radius: 5000 }, (data, status) => {\r\n        if (status === google.maps.StreetViewStatus.OK) {\r\n          setStreetViewStartCoordinates({\r\n            lat: data.location.latLng.lat(),\r\n            lng: data.location.latLng.lng(),\r\n          });\r\n          const panoramaInstance = new google.maps.StreetViewPanorama(\r\n            document.getElementById(\"street-view\"),\r\n            {\r\n              position: data.location.latLng,\r\n              pov: { heading: 0, pitch: 0 },\r\n              zoom: 1,\r\n              fullscreenControl: false,\r\n              enableCloseButton: false,\r\n              addressControl: false,\r\n              linksControl: false,\r\n              showRoadLabels: false,\r\n            }\r\n          );\r\n          setPanorama(panoramaInstance);\r\n          startTimer();\r\n        } else {\r\n          findRandomStreetView();\r\n        }\r\n      });\r\n    }\r\n\r\n    function findRandomStreetView() {\r\n      loadStreetView(getRandomLocation());\r\n    }\r\n\r\n    function startTimer() {\r\n      timerInterval.current = setInterval(() => {\r\n        setTimer((prev) => {\r\n          if (prev <= 1) {\r\n            clearInterval(timerInterval.current);\r\n            lockStreetView();\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n    }\r\n\r\n    function lockStreetView() {\r\n      if (panorama) {\r\n        panorama.setOptions({\r\n          disableDefaultUI: true,\r\n          draggable: false,\r\n          linksControl: false,\r\n          motionTracking: false,\r\n          motionTrackingControl: false,\r\n          clickToGo: false,\r\n          keyboardShortcuts: false,\r\n        });\r\n        alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\r\n      }\r\n    }\r\n\r\n    map = new google.maps.Map(document.getElementById(\"map\"), {\r\n      zoom: 1,\r\n      center: startCoordinates,\r\n      disableDefaultUI: true,\r\n    });\r\n\r\n    map.addListener(\"click\", (event) => {\r\n      if (marker) {\r\n        marker.setPosition(event.latLng);\r\n      } else {\r\n        marker = new google.maps.Marker({\r\n          position: event.latLng,\r\n          map: map,\r\n        });\r\n      }\r\n      setSelectedCoordinates({ lat: event.latLng.lat(), lng: event.latLng.lng() });\r\n    });\r\n\r\n    findRandomStreetView();\r\n  };\r\n\r\n  function calculateDistance(coord1, coord2) {\r\n    const R = 6371;\r\n    const dLat = ((coord2.lat - coord1.lat) * Math.PI) / 180;\r\n    const dLng = ((coord2.lng - coord1.lng) * Math.PI) / 180;\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos((coord1.lat * Math.PI) / 180) *\r\n        Math.cos((coord2.lat * Math.PI) / 180) *\r\n        Math.sin(dLng / 2) *\r\n        Math.sin(dLng / 2);\r\n    return R * (2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)));\r\n  }\r\n\r\n  function handleSearch() {\r\n    if (selectedCoordinates && streetViewStartCoordinates) {\r\n      const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\r\n      navigate(\"/resultaat\", {\r\n        state: {\r\n          distance: distance.toFixed(2),\r\n          startCoords: streetViewStartCoordinates,\r\n          selectedCoords: selectedCoordinates,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div id=\"timer-container\">Tijd over: {Math.floor(timer / 60)}:{(timer % 60).toString().padStart(2, \"0\")}</div>\r\n      <div id=\"street-view\"></div>\r\n      <div id=\"map-container\" className={mapExpanded ? \"expanded\" : \"\"}>\r\n        <button className=\"toggle-map-btn\" onClick={() => setMapExpanded(!mapExpanded)}>🗺️</button>\r\n        <div id=\"map\"></div>\r\n      </div>\r\n      {selectedCoordinates && (\r\n        <button className=\"distance-btn\" onClick={handleSearch}>Bekijk Afstand</button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Locatie;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}