{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teun.faassen\\\\gip\\\\gip_project\\\\geozoekkr\\\\geozoekkr-frontend\\\\src\\\\pages\\\\Locatie.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport '../styles/style_locatie.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst startTimer = duration => {\n  // Define your startTimer function here\n};\nconst Locatie = () => {\n  _s();\n  const startTimer = duration => {\n    // Define your startTimer function here\n  };\n  const loadGoogleMapsScript = callback => {\n    if (window.google && window.google.maps) {\n      console.log(\"Google Maps API is al geladen.\");\n      if (callback) callback();\n      return;\n    }\n    const existingScript = document.getElementById('googleMaps');\n    if (!existingScript) {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=&v=weekly`;\n      script.id = 'googleMaps';\n      document.body.appendChild(script);\n      script.onload = () => {\n        console.log(\"Google Maps API is geladen.\");\n        if (callback) callback();\n      };\n    } else {\n      if (callback) callback();\n    }\n  };\n  let panorama = null;\n  function initMap() {\n    let gameMode = localStorage.getItem(\"gameMode\") || \"classic\";\n    if (gameMode === \"timeLimit\") {\n      startTimer(60); // 1 minuut in plaats van 2m30\n    } else if (gameMode === \"team\") {\n      alert(\"Team modus: Speel om de hoogste gezamenlijke score te halen!\");\n    }\n    if (!window.google || !window.google.maps) {\n      console.error(\"Google Maps is niet correct geladen!\");\n      return;\n    }\n    const streetViewService = new window.google.maps.StreetViewService();\n    const streetViewContainer = document.getElementById('street-view');\n    const mapContainer = document.getElementById('map-container');\n    const toggleMapButton = document.getElementById('toggle-map');\n    const mapElement = document.getElementById('map');\n    const searchButton = document.getElementById('search-button');\n    if (!streetViewContainer || !mapContainer || !toggleMapButton || !mapElement || !searchButton) {\n      console.error(\"Een of meerdere HTML-elementen ontbreken!\");\n      return;\n    }\n    let map;\n    let marker = null;\n    let selectedCoordinates = null;\n    let streetViewStartCoordinates = null;\n\n    // Startlocatie (bijv. een specifieke locatie)\n    const startCoordinates = {\n      lat: 52.379189,\n      lng: 4.900826\n    }; // Amsterdam als voorbeeld\n\n    // Functie om een willekeurige locatie te genereren\n    function getRandomLocation() {\n      const lat = (Math.random() * 180 - 90).toFixed(6);\n      const lng = (Math.random() * 360 - 180).toFixed(6);\n      return {\n        lat: parseFloat(lat),\n        lng: parseFloat(lng)\n      };\n    }\n\n    // Functie om een Street View panorama te laden\n    function loadStreetView(location) {\n      streetViewService.getPanorama({\n        location: location,\n        radius: 5000\n      }, (data, status) => {\n        if (!data || !data.location || !data.location.latLng) {\n          console.error(\"❌ Geen geldige Street View data ontvangen:\", data);\n          findRandomStreetView();\n          return;\n        }\n        if (status === window.google.maps.StreetViewStatus.OK) {\n          streetViewStartCoordinates = {\n            lat: data.location.latLng.lat(),\n            lng: data.location.latLng.lng()\n          };\n          panorama = new window.google.maps.StreetViewPanorama(streetViewContainer, {\n            position: data.location.latLng,\n            pov: {\n              heading: 0,\n              pitch: 0\n            },\n            zoom: 1,\n            fullscreenControl: false,\n            enableCloseButton: false,\n            addressControl: false,\n            linksControl: false,\n            showRoadLabels: false\n          });\n          if (!timerStarted) {\n            startTimer();\n            timerStarted = true;\n          } // Zorg ervoor dat de timer niet meerdere keren start\n        } else {\n          console.log(\"Geen Street View gevonden op locatie:\", location);\n          findRandomStreetView();\n        }\n      });\n    }\n\n    // Functie om een willekeurige locatie te vinden\n    let streetViewAttempts = 0;\n    const MAX_ATTEMPTS = 5;\n    function findRandomStreetView() {\n      if (streetViewAttempts >= MAX_ATTEMPTS) {\n        console.error(\"❌ Te veel mislukte pogingen om Street View te laden!\");\n        return;\n      }\n      streetViewAttempts++;\n      const randomLocation = getRandomLocation();\n      console.log(`🔍 Poging ${streetViewAttempts} om Street View te vinden...`);\n      loadStreetView(randomLocation);\n    }\n\n    // Functie om de afstand tussen twee coördinaten te berekenen\n    function calculateDistance(coord1, coord2) {\n      const R = 6371; // Straal van de aarde in kilometers\n      const dLat = degreesToRadians(coord2.lat - coord1.lat);\n      const dLng = degreesToRadians(coord2.lng - coord1.lng);\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(coord1.lat)) * Math.cos(degreesToRadians(coord2.lat)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c; // Afstand in kilometers\n    }\n\n    // Hulpfunctie om graden naar radialen te converteren\n    function degreesToRadians(degrees) {\n      return degrees * (Math.PI / 180);\n    }\n\n    // Toggle de kaartweergave\n    if (toggleMapButton) {\n      toggleMapButton.addEventListener('click', () => {\n        const isCollapsed = mapContainer.classList.toggle('collapsed');\n        toggleMapButton.textContent = isCollapsed ? '▲' : '▼';\n      });\n    } else {\n      console.error(\"Toggle map button niet gevonden!\");\n    }\n    if (!window.google || !window.google.maps || !window.google.maps.Map) {\n      console.error(\"❌ Google Maps is niet correct geladen!\");\n      return;\n    }\n    map = new window.google.maps.Map(mapElement, {\n      zoom: 1,\n      center: startCoordinates,\n      disableDefaultUI: true\n    });\n\n    // Voeg een kliklistener toe aan de kaart\n    map.addListener('click', event => {\n      const clickedLocation = event.latLng;\n      if (marker) {\n        marker.setPosition(clickedLocation);\n      } else {\n        marker = new window.google.maps.Marker({\n          position: clickedLocation,\n          map: map\n        });\n      }\n      selectedCoordinates = {\n        lat: clickedLocation.lat().toFixed(6),\n        lng: clickedLocation.lng().toFixed(6)\n      };\n\n      // Zorg ervoor dat de zoekknop zichtbaar wordt\n      searchButton.style.display = 'block'; // De knop wordt zichtbaar na een klik op de kaart\n    });\n\n    // Start de zoektocht naar een willekeurige Street View\n    findRandomStreetView();\n    let timerStarted = false; // Controleer of de timer al gestart is\n    let startTime;\n    let elapsedTime = 0;\n    const TIME_LIMIT = 150; // 2 minuten en 30 seconden 150 seconden\n    const timerElement = document.getElementById(\"timer\");\n    window.onload = function () {\n      startTime = Date.now();\n      updateTimer();\n    };\n    function updateTimer() {\n      function update() {\n        elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n        let remainingTime = TIME_LIMIT - elapsedTime;\n        const progressBarFill = document.getElementById('progress-bar-fill');\n        const progressPercentage = remainingTime / TIME_LIMIT * 100;\n        progressBarFill.style.width = `${progressPercentage}%`;\n        if (remainingTime <= 0) {\n          clearInterval(interval);\n          lockStreetView();\n          timerElement.textContent = \"0:00\";\n          timerElement.style.color = \"red\"; // Maak de timer rood als de tijd op is\n          return;\n        }\n        if (remainingTime <= 30) {\n          timerElement.style.color = \"orange\";\n        }\n        let minutes = Math.floor(remainingTime / 60);\n        let seconds = remainingTime % 60;\n        timerElement.textContent = `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n      }\n      update();\n      let interval = setInterval(update, 1000);\n    }\n    function lockStreetView() {\n      if (panorama) {\n        panorama.setOptions({\n          disableDefaultUI: true,\n          // Verwijder alle UI-knoppen\n          scrollwheel: true,\n          panControl: false,\n          // Verwijder pan-controle\n          zoomControl: false,\n          // Verwijder zoom-controle\n          draggable: false,\n          // Maak de kaart niet versleepbaar\n          linksControl: false,\n          // Voorkom dat gebruikers naar andere locaties springen\n          motionTracking: false,\n          // Schakel bewegingsdetectie (mobiel) uit\n          motionTrackingControl: false,\n          // Verberg bewegingsdetectie-knop\n          clickToGo: false,\n          keyboardShortcuts: false\n        });\n        window.addEventListener('keydown', event => {\n          if ((event.key === 'ArrowUp' ||\n          // Move forward\n          event.key === 'ArrowDown' ||\n          // Move forward\n          event.key === 'ArrowLeft' ||\n          // Pan left\n          event.key === 'ArrowRight' ||\n          // Pan right\n          event.key === '+' ||\n          // Zoom in\n          event.key === '=' ||\n          // Zoom in\n          event.key === '_' ||\n          // Zoom out\n          event.key === '-' // Zoom out\n          ) && !event.metaKey && !event.altKey && !event.ctrlKey) {\n            event.stopPropagation();\n          }\n          ;\n        }, {\n          capture: true\n        });\n        alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\n      }\n    }\n    function stopTimer() {\n      return Math.min(elapsedTime, TIME_LIMIT);\n    }\n    function calculateScore(distance) {\n      let score = 5000;\n      if (distance <= 4) {\n        score -= distance * 0;\n      } else if (distance <= 10) {\n        score -= 4 * 0 + (distance - 4) * 1;\n      } else if (distance <= 100) {\n        score -= 6 * 1 + (distance - 10) * 5;\n      } else if (distance <= 1000) {\n        score -= 100 * 5 + (distance - 100) * 10;\n      } else {\n        score -= 100 * 5 + (distance - 100) * 15;\n      }\n      return Math.max(Math.round(score), 0); // Zorg dat de score niet negatief wordt\n    }\n\n    // Zoekknop event listener (bestaand script aanpassen)\n    if (!searchButton) {\n      console.error(\"❌ Zoekknop ontbreekt!\");\n    } else {\n      searchButton.addEventListener('click', () => {\n        if (selectedCoordinates && streetViewStartCoordinates) {\n          const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\n          const searchTime = stopTimer();\n          const score = calculateScore(distance);\n\n          // Redirect naar resultaat.html met alle gegevens\n          window.location.href = `/resultaat?distance=${distance.toFixed(2)}&startLat=${streetViewStartCoordinates.lat}&startLng=${streetViewStartCoordinates.lng}&selectedLat=${selectedCoordinates.lat}&selectedLng=${selectedCoordinates.lng}&time=${searchTime}&score=${score}`;\n        }\n      });\n    }\n    ;\n  }\n  ;\n  useEffect(() => {\n    loadGoogleMapsScript(() => {\n      initMap();\n    });\n    return () => {\n      const script = document.getElementById('googleMaps');\n      if (script) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timer-container\",\n      children: [\"Tijd over: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"timer\",\n        children: \"2:30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"progress-bar-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"street-view\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"search-button\",\n      children: \"Bekijk Afstand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-container\",\n      className: \"collapsed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"toggle-map\",\n        children: \"\\u25B2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 9\n  }, this);\n};\n_s(Locatie, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Locatie;\nexport default Locatie;\nvar _c;\n$RefreshReg$(_c, \"Locatie\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","startTimer","duration","Locatie","_s","loadGoogleMapsScript","callback","window","google","maps","console","log","existingScript","document","getElementById","script","createElement","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","id","body","appendChild","onload","panorama","initMap","gameMode","localStorage","getItem","alert","error","streetViewService","StreetViewService","streetViewContainer","mapContainer","toggleMapButton","mapElement","searchButton","map","marker","selectedCoordinates","streetViewStartCoordinates","startCoordinates","lat","lng","getRandomLocation","Math","random","toFixed","parseFloat","loadStreetView","location","getPanorama","radius","data","status","latLng","findRandomStreetView","StreetViewStatus","OK","StreetViewPanorama","position","pov","heading","pitch","zoom","fullscreenControl","enableCloseButton","addressControl","linksControl","showRoadLabels","timerStarted","streetViewAttempts","MAX_ATTEMPTS","randomLocation","calculateDistance","coord1","coord2","R","dLat","degreesToRadians","dLng","a","sin","cos","c","atan2","sqrt","degrees","PI","addEventListener","isCollapsed","classList","toggle","textContent","Map","center","disableDefaultUI","addListener","event","clickedLocation","setPosition","Marker","style","display","startTime","elapsedTime","TIME_LIMIT","timerElement","Date","now","updateTimer","update","floor","remainingTime","progressBarFill","progressPercentage","width","clearInterval","interval","lockStreetView","color","minutes","seconds","setInterval","setOptions","scrollwheel","panControl","zoomControl","draggable","motionTracking","motionTrackingControl","clickToGo","keyboardShortcuts","key","metaKey","altKey","ctrlKey","stopPropagation","capture","stopTimer","min","calculateScore","distance","score","max","round","searchTime","href","removeChild","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["C:/Users/teun.faassen/gip/gip_project/geozoekkr/geozoekkr-frontend/src/pages/Locatie.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport '../styles/style_locatie.css';\r\nconst startTimer = (duration) => {\r\n    // Define your startTimer function here\r\n  };\r\nconst Locatie = () => {\r\n    const startTimer = (duration) => {\r\n        // Define your startTimer function here\r\n      };\r\n\r\n  const loadGoogleMapsScript = (callback) => {\r\n    if (window.google && window.google.maps) {\r\n        console.log(\"Google Maps API is al geladen.\");\r\n        if (callback) callback();\r\n        return;\r\n    }\r\n    const existingScript = document.getElementById('googleMaps');\r\n    if (!existingScript) {\r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=&v=weekly`;\r\n      script.id = 'googleMaps';\r\n      document.body.appendChild(script);\r\n      script.onload = () => {\r\n        \r\n        console.log(\"Google Maps API is geladen.\");\r\n        if (callback) callback();\r\n        \r\n      };\r\n    \r\n    \r\n    } else {\r\n      if (callback) callback();\r\n    }\r\n  \r\n};\r\nlet panorama = null;\r\n\r\n   \r\n  function initMap() {\r\n    let gameMode = localStorage.getItem(\"gameMode\") || \"classic\";\r\n\r\n    if (gameMode === \"timeLimit\") {\r\n        startTimer(60); // 1 minuut in plaats van 2m30\r\n    } else if (gameMode === \"team\") {\r\n        alert(\"Team modus: Speel om de hoogste gezamenlijke score te halen!\");\r\n    }\r\n    \r\n    if (!window.google || !window.google.maps) {\r\n        console.error(\"Google Maps is niet correct geladen!\");\r\n        return;\r\n    }\r\n    const streetViewService = new window.google.maps.StreetViewService();\r\n    const streetViewContainer = document.getElementById('street-view');\r\n    const mapContainer = document.getElementById('map-container');\r\n    const toggleMapButton = document.getElementById('toggle-map');\r\n    const mapElement = document.getElementById('map');\r\n    const searchButton = document.getElementById('search-button');\r\n\r\n    if (!streetViewContainer || !mapContainer || !toggleMapButton || !mapElement || !searchButton) {\r\n        console.error(\"Een of meerdere HTML-elementen ontbreken!\");\r\n        return;\r\n    }\r\n\r\n    \r\n    let map;\r\n    let marker = null;\r\n    let selectedCoordinates = null;\r\n    let streetViewStartCoordinates = null;\r\n\r\n    // Startlocatie (bijv. een specifieke locatie)\r\n    const startCoordinates = { lat: 52.379189, lng: 4.900826 }; // Amsterdam als voorbeeld\r\n\r\n    // Functie om een willekeurige locatie te genereren\r\n    function getRandomLocation() {\r\n        const lat = (Math.random() * 180 - 90).toFixed(6);\r\n        const lng = (Math.random() * 360 - 180).toFixed(6);\r\n        return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n    }\r\n\r\n    // Functie om een Street View panorama te laden\r\n    function loadStreetView(location) {\r\n        streetViewService.getPanorama(\r\n            { location: location, radius: 5000 },\r\n            (data, status) => {\r\n                if (!data || !data.location || !data.location.latLng) {\r\n                    console.error(\"❌ Geen geldige Street View data ontvangen:\", data);\r\n                    findRandomStreetView(); \r\n                    return;\r\n                }\r\n                if (status === window.google.maps.StreetViewStatus.OK) {\r\n                    streetViewStartCoordinates = {\r\n                        lat: data.location.latLng.lat(),\r\n                        lng: data.location.latLng.lng(),\r\n                    };\r\n\r\n                    panorama = new window.google.maps.StreetViewPanorama(streetViewContainer, {\r\n                        position: data.location.latLng,\r\n                        pov: { heading: 0, pitch: 0 },\r\n                        zoom: 1,\r\n                        fullscreenControl: false,\r\n                        enableCloseButton: false,\r\n                        addressControl: false,\r\n                        linksControl: false,\r\n                        showRoadLabels: false,\r\n                    });\r\n                    if (!timerStarted) {\r\n                        startTimer();\r\n                        timerStarted = true;} // Zorg ervoor dat de timer niet meerdere keren start\r\n                } else {\r\n                    console.log(\"Geen Street View gevonden op locatie:\", location);\r\n                    findRandomStreetView();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // Functie om een willekeurige locatie te vinden\r\n    let streetViewAttempts = 0;\r\n    const MAX_ATTEMPTS = 5;\r\n\r\n    function findRandomStreetView() {\r\n        if (streetViewAttempts >= MAX_ATTEMPTS) {\r\n            console.error(\"❌ Te veel mislukte pogingen om Street View te laden!\");\r\n            return;\r\n        }\r\n    \r\n        streetViewAttempts++;\r\n        const randomLocation = getRandomLocation();\r\n        console.log(`🔍 Poging ${streetViewAttempts} om Street View te vinden...`);\r\n        loadStreetView(randomLocation);\r\n    }\r\n \r\n\r\n    // Functie om de afstand tussen twee coördinaten te berekenen\r\n    function calculateDistance(coord1, coord2) {\r\n        const R = 6371; // Straal van de aarde in kilometers\r\n        const dLat = degreesToRadians(coord2.lat - coord1.lat);\r\n        const dLng = degreesToRadians(coord2.lng - coord1.lng);\r\n        const a =\r\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos(degreesToRadians(coord1.lat)) *\r\n            Math.cos(degreesToRadians(coord2.lat)) *\r\n            Math.sin(dLng / 2) *\r\n            Math.sin(dLng / 2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        return R * c; // Afstand in kilometers\r\n    }\r\n\r\n    // Hulpfunctie om graden naar radialen te converteren\r\n    function degreesToRadians(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    // Toggle de kaartweergave\r\n    if (toggleMapButton) {\r\n        toggleMapButton.addEventListener('click', () => {\r\n            const isCollapsed = mapContainer.classList.toggle('collapsed');\r\n            toggleMapButton.textContent = isCollapsed ? '▲' : '▼';\r\n        });\r\n    } else {\r\n        console.error(\"Toggle map button niet gevonden!\");\r\n    }\r\n    \r\n\r\n    if (!window.google || !window.google.maps || !window.google.maps.Map) {\r\n        console.error(\"❌ Google Maps is niet correct geladen!\");\r\n        return;\r\n    }\r\n    \r\n    map = new window.google.maps.Map(mapElement, {\r\n        zoom: 1,\r\n        center: startCoordinates,\r\n        disableDefaultUI: true,\r\n    });\r\n    \r\n\r\n    // Voeg een kliklistener toe aan de kaart\r\n    map.addListener('click', (event) => {\r\n        const clickedLocation = event.latLng;\r\n\r\n        if (marker) {\r\n            marker.setPosition(clickedLocation);\r\n        } else {\r\n            marker = new window.google.maps.Marker({\r\n                position: clickedLocation,\r\n                map: map,\r\n            });\r\n        }\r\n\r\n        selectedCoordinates = {\r\n            lat: clickedLocation.lat().toFixed(6),\r\n            lng: clickedLocation.lng().toFixed(6),\r\n        };\r\n\r\n        // Zorg ervoor dat de zoekknop zichtbaar wordt\r\n        searchButton.style.display = 'block'; // De knop wordt zichtbaar na een klik op de kaart\r\n    });\r\n\r\n    // Start de zoektocht naar een willekeurige Street View\r\n    findRandomStreetView();\r\n\r\n\r\n    let timerStarted = false; // Controleer of de timer al gestart is\r\n    let startTime;\r\n    let elapsedTime = 0; \r\n    const TIME_LIMIT = 150; // 2 minuten en 30 seconden 150 seconden\r\n    const timerElement = document.getElementById(\"timer\");\r\n\r\n    window.onload = function () {\r\n        startTime = Date.now();\r\n        updateTimer();\r\n    };\r\n    function updateTimer() {\r\n        function update() {\r\n            elapsedTime = Math.floor((Date.now() - startTime) / 1000);\r\n            let remainingTime = TIME_LIMIT - elapsedTime;\r\n\r\n            const progressBarFill = document.getElementById('progress-bar-fill');\r\n            const progressPercentage = (remainingTime / TIME_LIMIT) * 100;\r\n            progressBarFill.style.width = `${progressPercentage}%`;\r\n\r\n            if (remainingTime <= 0) {\r\n                clearInterval(interval);\r\n                lockStreetView();\r\n                timerElement.textContent = \"0:00\";\r\n                timerElement.style.color = \"red\"; // Maak de timer rood als de tijd op is\r\n                return;\r\n            }if (remainingTime <= 30) {\r\n                timerElement.style.color = \"orange\";\r\n            }\r\n            let minutes = Math.floor(remainingTime / 60);\r\n            let seconds = remainingTime % 60;\r\n            timerElement.textContent = `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n        }\r\n        update();\r\n        let interval = setInterval(update, 1000);\r\n    }\r\n    function lockStreetView() {\r\n        if (panorama) {\r\n            panorama.setOptions({\r\n                disableDefaultUI: true, // Verwijder alle UI-knoppen\r\n                scrollwheel: true, \r\n                panControl: false, // Verwijder pan-controle\r\n                zoomControl: false, // Verwijder zoom-controle\r\n                draggable: false, // Maak de kaart niet versleepbaar\r\n                linksControl: false, // Voorkom dat gebruikers naar andere locaties springen\r\n                motionTracking: false, // Schakel bewegingsdetectie (mobiel) uit\r\n                motionTrackingControl: false, // Verberg bewegingsdetectie-knop\r\n                clickToGo: false,\r\n                keyboardShortcuts: false\r\n            });\r\n            window.addEventListener(\r\n                'keydown',\r\n                (event) => {\r\n                    if (\r\n                    (\r\n                        event.key === 'ArrowUp' || // Move forward\r\n                        event.key === 'ArrowDown' || // Move forward\r\n                        event.key === 'ArrowLeft' || // Pan left\r\n                        event.key === 'ArrowRight' || // Pan right\r\n                        event.key === '+' || // Zoom in\r\n                        event.key === '=' || // Zoom in\r\n                        event.key === '_' || // Zoom out\r\n                        event.key === '-' // Zoom out\r\n                    ) &&\r\n                    !event.metaKey &&\r\n                    !event.altKey &&\r\n                    !event.ctrlKey\r\n                    ) {\r\n                    event.stopPropagation()\r\n                    };\r\n                },\r\n            { capture: true },\r\n        );\r\n            alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\r\n        }\r\n    }\r\n    function stopTimer() {\r\n        return Math.min(elapsedTime, TIME_LIMIT);\r\n    }\r\n    function calculateScore(distance) {\r\n        let score = 5000;\r\n        if (distance <= 4) {\r\n            score -= distance * 0;\r\n        }\r\n        else if (distance <= 10) {\r\n        score -= (4 * 0) + ((distance -4) * 1);\r\n        }\r\n        else if (distance <= 100) {\r\n            score -= (6 * 1) +((distance - 10) * 5);\r\n        }\r\n        else if (distance <= 1000) {\r\n            score -= (100 * 5) + ((distance - 100) * 10);                \r\n        }\r\n         else {\r\n            score -= (100 * 5) + ((distance - 100) * 15);\r\n        }\r\n        return Math.max(Math.round(score), 0); // Zorg dat de score niet negatief wordt\r\n    }\r\n\r\n    // Zoekknop event listener (bestaand script aanpassen)\r\n    if (!searchButton) {\r\n        console.error(\"❌ Zoekknop ontbreekt!\");\r\n    } else {\r\n        searchButton.addEventListener('click', () => {\r\n    \r\n            if (selectedCoordinates && streetViewStartCoordinates) {\r\n                const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\r\n                const searchTime = stopTimer();\r\n                const score = calculateScore(distance);\r\n\r\n            // Redirect naar resultaat.html met alle gegevens\r\n                window.location.href = `/resultaat?distance=${distance.toFixed(2)}&startLat=${streetViewStartCoordinates.lat}&startLng=${streetViewStartCoordinates.lng}&selectedLat=${selectedCoordinates.lat}&selectedLng=${selectedCoordinates.lng}&time=${searchTime}&score=${score}`;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\nuseEffect(() => {\r\n    loadGoogleMapsScript(() => {\r\n        initMap();\r\n    });\r\n\r\n    return () => {\r\n        const script = document.getElementById('googleMaps');\r\n        if (script) {\r\n            document.body.removeChild(script);\r\n        }\r\n    };\r\n}, []);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"timer-container\">\r\n                Tijd over: <span id=\"timer\">2:30</span>\r\n            <div className=\"progress-bar\">\r\n                <span id=\"progress-bar-fill\"></span>\r\n            </div>\r\n            </div>\r\n                <div id=\"street-view\"></div>\r\n                    <button id=\"search-button\">Bekijk Afstand</button>\r\n                    <div id=\"map-container\" className=\"collapsed\">\r\n                <div id=\"toggle-map\">▲</div>\r\n            <div id=\"map\"></div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Locatie;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}