{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\teun.faassen\\\\gip\\\\gip_project\\\\geozoekkr\\\\geozoekkr-frontend\\\\src\\\\pages\\\\Locatie.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport '../styles/style_locatie.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst startTimer = duration => {\n  // Define your startTimer function here\n};\nconst Locatie = () => {\n  const startTimer = duration => {\n    // Define your startTimer function here\n  };\n  const loadGoogleMapsScript = callback => {\n    const existingScript = document.getElementById('googleMaps');\n    if (!existingScript) {\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=&v=weekly`;\n      script.id = 'googleMaps';\n      document.body.appendChild(script);\n      script.onload = () => {\n        if (window.google && window.google.maps) {\n          console.log(\"Google Maps API is geladen.\");\n          if (callback) callback();\n        } else {\n          console.error(\"Google Maps API kon niet correct geladen worden.\");\n        }\n      };\n    } else {\n      if (callback) callback();\n    }\n  };\n};\n_c = Locatie;\nconst initMap = () => {\n  _s();\n  let gameMode = localStorage.getItem(\"gameMode\") || \"classic\";\n  if (gameMode === \"timeLimit\") {\n    startTimer(60); // 1 minuut in plaats van 2m30\n  } else if (gameMode === \"team\") {\n    alert(\"Team modus: Speel om de hoogste gezamenlijke score te halen!\");\n  }\n  let panorama;\n  if (!window.google || !window.google.maps) {\n    console.error(\"Google Maps is niet correct geladen!\");\n    return;\n  }\n  const streetViewService = new window.google.maps.StreetViewService();\n  const streetViewContainer = document.getElementById('street-view');\n  const mapContainer = document.getElementById('map-container');\n  const toggleMapButton = document.getElementById('toggle-map');\n  const mapElement = document.getElementById('map');\n  const searchButton = document.getElementById('search-button');\n  if (!streetViewContainer || !mapContainer || !toggleMapButton || !mapElement || !searchButton) {\n    console.error(\"Een of meerdere HTML-elementen ontbreken!\");\n    return;\n  }\n  let map;\n  let marker = null;\n  let selectedCoordinates = null;\n  let streetViewStartCoordinates = null;\n\n  // Startlocatie (bijv. een specifieke locatie)\n  const startCoordinates = {\n    lat: 52.379189,\n    lng: 4.900826\n  }; // Amsterdam als voorbeeld\n\n  // Functie om een willekeurige locatie te genereren\n  function getRandomLocation() {\n    const lat = (Math.random() * 180 - 90).toFixed(6);\n    const lng = (Math.random() * 360 - 180).toFixed(6);\n    return {\n      lat: parseFloat(lat),\n      lng: parseFloat(lng)\n    };\n  }\n\n  // Functie om een Street View panorama te laden\n  function loadStreetView(location) {\n    streetViewService.getPanorama({\n      location: location,\n      radius: 5000\n    }, (data, status) => {\n      if (!data || !data.location || !data.location.latLng) {\n        console.error(\"❌ Geen geldige Street View data ontvangen:\", data);\n        findRandomStreetView();\n        return;\n      }\n      if (status === window.google.maps.StreetViewStatus.OK) {\n        streetViewStartCoordinates = {\n          lat: data.location.latLng.lat(),\n          lng: data.location.latLng.lng()\n        };\n        panorama = new window.google.maps.StreetViewPanorama(streetViewContainer, {\n          position: data.location.latLng,\n          pov: {\n            heading: 0,\n            pitch: 0\n          },\n          zoom: 1,\n          fullscreenControl: false,\n          enableCloseButton: false,\n          addressControl: false,\n          linksControl: false,\n          showRoadLabels: false\n        });\n        if (!timerStarted) {\n          startTimer();\n          timerStarted = true;\n        } // Zorg ervoor dat de timer niet meerdere keren start\n      } else {\n        console.log(\"Geen Street View gevonden op locatie:\", location);\n        findRandomStreetView();\n      }\n    });\n  }\n\n  // Functie om een willekeurige locatie te vinden\n  let streetViewAttempts = 0;\n  const MAX_ATTEMPTS = 5;\n  function findRandomStreetView() {\n    if (streetViewAttempts >= MAX_ATTEMPTS) {\n      console.error(\"❌ Te veel mislukte pogingen om Street View te laden!\");\n      return;\n    }\n    streetViewAttempts++;\n    const randomLocation = getRandomLocation();\n    console.log(`🔍 Poging ${streetViewAttempts} om Street View te vinden...`);\n    loadStreetView(randomLocation);\n  }\n\n  // Functie om de afstand tussen twee coördinaten te berekenen\n  function calculateDistance(coord1, coord2) {\n    const R = 6371; // Straal van de aarde in kilometers\n    const dLat = degreesToRadians(coord2.lat - coord1.lat);\n    const dLng = degreesToRadians(coord2.lng - coord1.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(coord1.lat)) * Math.cos(degreesToRadians(coord2.lat)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c; // Afstand in kilometers\n  }\n\n  // Hulpfunctie om graden naar radialen te converteren\n  function degreesToRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  // Toggle de kaartweergave\n  if (toggleMapButton) {\n    toggleMapButton.addEventListener('click', () => {\n      const isCollapsed = mapContainer.classList.toggle('collapsed');\n      toggleMapButton.textContent = isCollapsed ? '▲' : '▼';\n    });\n  } else {\n    console.error(\"Toggle map button niet gevonden!\");\n  }\n  if (!window.google || !window.google.maps || !window.google.maps.Map) {\n    console.error(\"❌ Google Maps is niet correct geladen!\");\n    return;\n  }\n  map = new window.google.maps.Map(mapElement, {\n    zoom: 1,\n    center: startCoordinates,\n    disableDefaultUI: true\n  });\n\n  // Voeg een kliklistener toe aan de kaart\n  map.addListener('click', event => {\n    const clickedLocation = event.latLng;\n    if (marker) {\n      marker.setPosition(clickedLocation);\n    } else {\n      marker = new window.google.maps.Marker({\n        position: clickedLocation,\n        map: map\n      });\n    }\n    selectedCoordinates = {\n      lat: clickedLocation.lat().toFixed(6),\n      lng: clickedLocation.lng().toFixed(6)\n    };\n\n    // Zorg ervoor dat de zoekknop zichtbaar wordt\n    searchButton.style.display = 'block'; // De knop wordt zichtbaar na een klik op de kaart\n  });\n\n  // Start de zoektocht naar een willekeurige Street View\n  findRandomStreetView();\n  let timerStarted = false; // Controleer of de timer al gestart is\n  let startTime;\n  let elapsedTime = 0;\n  const TIME_LIMIT = 150; // 2 minuten en 30 seconden 150 seconden\n  const timerElement = document.getElementById(\"timer\");\n  window.onload = function () {\n    startTime = Date.now();\n    updateTimer();\n  };\n  function updateTimer() {\n    function update() {\n      elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n      let remainingTime = TIME_LIMIT - elapsedTime;\n      const progressBarFill = document.getElementById('progress-bar-fill');\n      const progressPercentage = remainingTime / TIME_LIMIT * 100;\n      progressBarFill.style.width = `${progressPercentage}%`;\n      if (remainingTime <= 0) {\n        clearInterval(interval);\n        lockStreetView();\n        timerElement.textContent = \"0:00\";\n        timerElement.style.color = \"red\"; // Maak de timer rood als de tijd op is\n        return;\n      }\n      if (remainingTime <= 30) {\n        timerElement.style.color = \"orange\";\n      }\n      let minutes = Math.floor(remainingTime / 60);\n      let seconds = remainingTime % 60;\n      timerElement.textContent = `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\n    }\n    update();\n    let interval = setInterval(update, 1000);\n  }\n  function lockStreetView() {\n    if (panorama) {\n      panorama.setOptions({\n        disableDefaultUI: true,\n        // Verwijder alle UI-knoppen\n        scrollwheel: true,\n        panControl: false,\n        // Verwijder pan-controle\n        zoomControl: false,\n        // Verwijder zoom-controle\n        draggable: false,\n        // Maak de kaart niet versleepbaar\n        linksControl: false,\n        // Voorkom dat gebruikers naar andere locaties springen\n        motionTracking: false,\n        // Schakel bewegingsdetectie (mobiel) uit\n        motionTrackingControl: false,\n        // Verberg bewegingsdetectie-knop\n        clickToGo: false,\n        keyboardShortcuts: false\n      });\n      window.addEventListener('keydown', event => {\n        if ((event.key === 'ArrowUp' ||\n        // Move forward\n        event.key === 'ArrowDown' ||\n        // Move forward\n        event.key === 'ArrowLeft' ||\n        // Pan left\n        event.key === 'ArrowRight' ||\n        // Pan right\n        event.key === '+' ||\n        // Zoom in\n        event.key === '=' ||\n        // Zoom in\n        event.key === '_' ||\n        // Zoom out\n        event.key === '-' // Zoom out\n        ) && !event.metaKey && !event.altKey && !event.ctrlKey) {\n          event.stopPropagation();\n        }\n        ;\n      }, {\n        capture: true\n      });\n      alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\n    }\n  }\n  function stopTimer() {\n    return Math.min(elapsedTime, TIME_LIMIT);\n  }\n  function calculateScore(distance) {\n    let score = 5000;\n    if (distance <= 4) {\n      score -= distance * 0;\n    } else if (distance <= 10) {\n      score -= 4 * 0 + (distance - 4) * 1;\n    } else if (distance <= 100) {\n      score -= 6 * 1 + (distance - 10) * 5;\n    } else if (distance <= 1000) {\n      score -= 100 * 5 + (distance - 100) * 10;\n    } else {\n      score -= 100 * 5 + (distance - 100) * 15;\n    }\n    return Math.max(Math.round(score), 0); // Zorg dat de score niet negatief wordt\n  }\n\n  // Zoekknop event listener (bestaand script aanpassen)\n  if (!searchButton) {\n    console.error(\"❌ Zoekknop ontbreekt!\");\n  } else {\n    searchButton.addEventListener('click', () => {\n      if (selectedCoordinates && streetViewStartCoordinates) {\n        const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\n        const searchTime = stopTimer();\n        const score = calculateScore(distance);\n\n        // Redirect naar resultaat.html met alle gegevens\n        window.location.href = `/resultaat?distance=${distance.toFixed(2)}&startLat=${streetViewStartCoordinates.lat}&startLng=${streetViewStartCoordinates.lng}&selectedLat=${selectedCoordinates.lat}&selectedLng=${selectedCoordinates.lng}&time=${searchTime}&score=${score}`;\n      }\n    });\n  }\n  ;\n  useEffect(() => {\n    const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n    if (!apiKey) {\n      console.error(\"Google Maps API Key is niet ingesteld!\");\n    } else {\n      console.log(\"Google Maps API Key geladen:\", apiKey);\n    } // Log the API key to check if it's loaded correctly\n    loadGoogleMapsScript(() => {\n      initMap();\n    });\n    return () => {\n      const script = document.getElementById('googleMaps');\n      if (script) {\n        document.body.removeChild(script);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"timer-container\",\n      children: [\"Tijd over: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"timer\",\n        children: \"2:30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"progress-bar-fill\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"street-view\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"search-button\",\n      children: \"Bekijk Afstand\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-container\",\n      className: \"collapsed\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"toggle-map\",\n        children: \"\\u25B2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 9\n  }, this);\n};\n_s(initMap, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\nexport default Locatie;\nvar _c;\n$RefreshReg$(_c, \"Locatie\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","startTimer","duration","Locatie","loadGoogleMapsScript","callback","existingScript","document","getElementById","script","createElement","src","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","id","body","appendChild","onload","window","google","maps","console","log","error","_c","initMap","_s","gameMode","localStorage","getItem","alert","panorama","streetViewService","StreetViewService","streetViewContainer","mapContainer","toggleMapButton","mapElement","searchButton","map","marker","selectedCoordinates","streetViewStartCoordinates","startCoordinates","lat","lng","getRandomLocation","Math","random","toFixed","parseFloat","loadStreetView","location","getPanorama","radius","data","status","latLng","findRandomStreetView","StreetViewStatus","OK","StreetViewPanorama","position","pov","heading","pitch","zoom","fullscreenControl","enableCloseButton","addressControl","linksControl","showRoadLabels","timerStarted","streetViewAttempts","MAX_ATTEMPTS","randomLocation","calculateDistance","coord1","coord2","R","dLat","degreesToRadians","dLng","a","sin","cos","c","atan2","sqrt","degrees","PI","addEventListener","isCollapsed","classList","toggle","textContent","Map","center","disableDefaultUI","addListener","event","clickedLocation","setPosition","Marker","style","display","startTime","elapsedTime","TIME_LIMIT","timerElement","Date","now","updateTimer","update","floor","remainingTime","progressBarFill","progressPercentage","width","clearInterval","interval","lockStreetView","color","minutes","seconds","setInterval","setOptions","scrollwheel","panControl","zoomControl","draggable","motionTracking","motionTrackingControl","clickToGo","keyboardShortcuts","key","metaKey","altKey","ctrlKey","stopPropagation","capture","stopTimer","min","calculateScore","distance","score","max","round","searchTime","href","apiKey","removeChild","children","fileName","_jsxFileName","lineNumber","columnNumber","className","$RefreshReg$"],"sources":["C:/Users/teun.faassen/gip/gip_project/geozoekkr/geozoekkr-frontend/src/pages/Locatie.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport '../styles/style_locatie.css';\r\nconst startTimer = (duration) => {\r\n    // Define your startTimer function here\r\n  };\r\nconst Locatie = () => {\r\n  const startTimer = (duration) => {\r\n    // Define your startTimer function here\r\n  };\r\n\r\n  const loadGoogleMapsScript = (callback) => {\r\n    const existingScript = document.getElementById('googleMaps');\r\n    if (!existingScript) {\r\n      const script = document.createElement('script');\r\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&libraries=&v=weekly`;\r\n      script.id = 'googleMaps';\r\n      document.body.appendChild(script);\r\n      script.onload = () => {\r\n        if (window.google && window.google.maps) {\r\n            console.log(\"Google Maps API is geladen.\");\r\n            if (callback) callback();\r\n        } else {\r\n            console.error(\"Google Maps API kon niet correct geladen worden.\");\r\n        }\r\n    };\r\n    \r\n    } else {\r\n      if (callback) callback();\r\n    }\r\n  };\r\n};\r\n  \r\n   \r\n  const initMap = () => {\r\n    let gameMode = localStorage.getItem(\"gameMode\") || \"classic\";\r\n\r\n    if (gameMode === \"timeLimit\") {\r\n        startTimer(60); // 1 minuut in plaats van 2m30\r\n    } else if (gameMode === \"team\") {\r\n        alert(\"Team modus: Speel om de hoogste gezamenlijke score te halen!\");\r\n    }\r\n    let panorama;\r\n    if (!window.google || !window.google.maps) {\r\n        console.error(\"Google Maps is niet correct geladen!\");\r\n        return;\r\n    }\r\n    const streetViewService = new window.google.maps.StreetViewService();\r\n    const streetViewContainer = document.getElementById('street-view');\r\n    const mapContainer = document.getElementById('map-container');\r\n    const toggleMapButton = document.getElementById('toggle-map');\r\n    const mapElement = document.getElementById('map');\r\n    const searchButton = document.getElementById('search-button');\r\n\r\n    if (!streetViewContainer || !mapContainer || !toggleMapButton || !mapElement || !searchButton) {\r\n        console.error(\"Een of meerdere HTML-elementen ontbreken!\");\r\n        return;\r\n    }\r\n\r\n    \r\n    let map;\r\n    let marker = null;\r\n    let selectedCoordinates = null;\r\n    let streetViewStartCoordinates = null;\r\n\r\n    // Startlocatie (bijv. een specifieke locatie)\r\n    const startCoordinates = { lat: 52.379189, lng: 4.900826 }; // Amsterdam als voorbeeld\r\n\r\n    // Functie om een willekeurige locatie te genereren\r\n    function getRandomLocation() {\r\n        const lat = (Math.random() * 180 - 90).toFixed(6);\r\n        const lng = (Math.random() * 360 - 180).toFixed(6);\r\n        return { lat: parseFloat(lat), lng: parseFloat(lng) };\r\n    }\r\n\r\n    // Functie om een Street View panorama te laden\r\n    function loadStreetView(location) {\r\n        streetViewService.getPanorama(\r\n            { location: location, radius: 5000 },\r\n            (data, status) => {\r\n                if (!data || !data.location || !data.location.latLng) {\r\n                    console.error(\"❌ Geen geldige Street View data ontvangen:\", data);\r\n                    findRandomStreetView(); \r\n                    return;\r\n                }\r\n                if (status === window.google.maps.StreetViewStatus.OK) {\r\n                    streetViewStartCoordinates = {\r\n                        lat: data.location.latLng.lat(),\r\n                        lng: data.location.latLng.lng(),\r\n                    };\r\n\r\n                    panorama = new window.google.maps.StreetViewPanorama(streetViewContainer, {\r\n                        position: data.location.latLng,\r\n                        pov: { heading: 0, pitch: 0 },\r\n                        zoom: 1,\r\n                        fullscreenControl: false,\r\n                        enableCloseButton: false,\r\n                        addressControl: false,\r\n                        linksControl: false,\r\n                        showRoadLabels: false,\r\n                    });\r\n                    if (!timerStarted) {\r\n                        startTimer();\r\n                        timerStarted = true;} // Zorg ervoor dat de timer niet meerdere keren start\r\n                } else {\r\n                    console.log(\"Geen Street View gevonden op locatie:\", location);\r\n                    findRandomStreetView();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // Functie om een willekeurige locatie te vinden\r\n    let streetViewAttempts = 0;\r\n    const MAX_ATTEMPTS = 5;\r\n\r\n    function findRandomStreetView() {\r\n        if (streetViewAttempts >= MAX_ATTEMPTS) {\r\n            console.error(\"❌ Te veel mislukte pogingen om Street View te laden!\");\r\n            return;\r\n        }\r\n    \r\n        streetViewAttempts++;\r\n        const randomLocation = getRandomLocation();\r\n        console.log(`🔍 Poging ${streetViewAttempts} om Street View te vinden...`);\r\n        loadStreetView(randomLocation);\r\n    }\r\n \r\n\r\n    // Functie om de afstand tussen twee coördinaten te berekenen\r\n    function calculateDistance(coord1, coord2) {\r\n        const R = 6371; // Straal van de aarde in kilometers\r\n        const dLat = degreesToRadians(coord2.lat - coord1.lat);\r\n        const dLng = degreesToRadians(coord2.lng - coord1.lng);\r\n        const a =\r\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n            Math.cos(degreesToRadians(coord1.lat)) *\r\n            Math.cos(degreesToRadians(coord2.lat)) *\r\n            Math.sin(dLng / 2) *\r\n            Math.sin(dLng / 2);\r\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        return R * c; // Afstand in kilometers\r\n    }\r\n\r\n    // Hulpfunctie om graden naar radialen te converteren\r\n    function degreesToRadians(degrees) {\r\n        return degrees * (Math.PI / 180);\r\n    }\r\n\r\n    // Toggle de kaartweergave\r\n    if (toggleMapButton) {\r\n        toggleMapButton.addEventListener('click', () => {\r\n            const isCollapsed = mapContainer.classList.toggle('collapsed');\r\n            toggleMapButton.textContent = isCollapsed ? '▲' : '▼';\r\n        });\r\n    } else {\r\n        console.error(\"Toggle map button niet gevonden!\");\r\n    }\r\n    \r\n\r\n    if (!window.google || !window.google.maps || !window.google.maps.Map) {\r\n        console.error(\"❌ Google Maps is niet correct geladen!\");\r\n        return;\r\n    }\r\n    \r\n    map = new window.google.maps.Map(mapElement, {\r\n        zoom: 1,\r\n        center: startCoordinates,\r\n        disableDefaultUI: true,\r\n    });\r\n    \r\n\r\n    // Voeg een kliklistener toe aan de kaart\r\n    map.addListener('click', (event) => {\r\n        const clickedLocation = event.latLng;\r\n\r\n        if (marker) {\r\n            marker.setPosition(clickedLocation);\r\n        } else {\r\n            marker = new window.google.maps.Marker({\r\n                position: clickedLocation,\r\n                map: map,\r\n            });\r\n        }\r\n\r\n        selectedCoordinates = {\r\n            lat: clickedLocation.lat().toFixed(6),\r\n            lng: clickedLocation.lng().toFixed(6),\r\n        };\r\n\r\n        // Zorg ervoor dat de zoekknop zichtbaar wordt\r\n        searchButton.style.display = 'block'; // De knop wordt zichtbaar na een klik op de kaart\r\n    });\r\n\r\n    // Start de zoektocht naar een willekeurige Street View\r\n    findRandomStreetView();\r\n\r\n    let timerStarted = false; // Controleer of de timer al gestart is\r\n    let startTime;\r\n    let elapsedTime = 0; \r\n    const TIME_LIMIT = 150; // 2 minuten en 30 seconden 150 seconden\r\n    const timerElement = document.getElementById(\"timer\");\r\n\r\n    window.onload = function () {\r\n        startTime = Date.now();\r\n        updateTimer();\r\n    };\r\n    function updateTimer() {\r\n        function update() {\r\n            elapsedTime = Math.floor((Date.now() - startTime) / 1000);\r\n            let remainingTime = TIME_LIMIT - elapsedTime;\r\n\r\n            const progressBarFill = document.getElementById('progress-bar-fill');\r\n            const progressPercentage = (remainingTime / TIME_LIMIT) * 100;\r\n            progressBarFill.style.width = `${progressPercentage}%`;\r\n\r\n            if (remainingTime <= 0) {\r\n                clearInterval(interval);\r\n                lockStreetView();\r\n                timerElement.textContent = \"0:00\";\r\n                timerElement.style.color = \"red\"; // Maak de timer rood als de tijd op is\r\n                return;\r\n            }if (remainingTime <= 30) {\r\n                timerElement.style.color = \"orange\";\r\n            }\r\n            let minutes = Math.floor(remainingTime / 60);\r\n            let seconds = remainingTime % 60;\r\n            timerElement.textContent = `${minutes}:${seconds < 10 ? \"0\" : \"\"}${seconds}`;\r\n        }\r\n        update();\r\n        let interval = setInterval(update, 1000);\r\n    }\r\n    function lockStreetView() {\r\n        if (panorama) {\r\n            panorama.setOptions({\r\n                disableDefaultUI: true, // Verwijder alle UI-knoppen\r\n                scrollwheel: true, \r\n                panControl: false, // Verwijder pan-controle\r\n                zoomControl: false, // Verwijder zoom-controle\r\n                draggable: false, // Maak de kaart niet versleepbaar\r\n                linksControl: false, // Voorkom dat gebruikers naar andere locaties springen\r\n                motionTracking: false, // Schakel bewegingsdetectie (mobiel) uit\r\n                motionTrackingControl: false, // Verberg bewegingsdetectie-knop\r\n                clickToGo: false,\r\n                keyboardShortcuts: false\r\n            });\r\n            window.addEventListener(\r\n                'keydown',\r\n                (event) => {\r\n                    if (\r\n                    (\r\n                        event.key === 'ArrowUp' || // Move forward\r\n                        event.key === 'ArrowDown' || // Move forward\r\n                        event.key === 'ArrowLeft' || // Pan left\r\n                        event.key === 'ArrowRight' || // Pan right\r\n                        event.key === '+' || // Zoom in\r\n                        event.key === '=' || // Zoom in\r\n                        event.key === '_' || // Zoom out\r\n                        event.key === '-' // Zoom out\r\n                    ) &&\r\n                    !event.metaKey &&\r\n                    !event.altKey &&\r\n                    !event.ctrlKey\r\n                    ) {\r\n                    event.stopPropagation()\r\n                    };\r\n                },\r\n            { capture: true },\r\n        );\r\n            alert(\"Tijd voorbij! Je kunt niet meer bewegen.\");\r\n        }\r\n    }\r\n    function stopTimer() {\r\n        return Math.min(elapsedTime, TIME_LIMIT);\r\n    }\r\n    function calculateScore(distance) {\r\n        let score = 5000;\r\n        if (distance <= 4) {\r\n            score -= distance * 0;\r\n        }\r\n        else if (distance <= 10) {\r\n        score -= (4 * 0) + ((distance -4) * 1);\r\n        }\r\n        else if (distance <= 100) {\r\n            score -= (6 * 1) +((distance - 10) * 5);\r\n        }\r\n        else if (distance <= 1000) {\r\n            score -= (100 * 5) + ((distance - 100) * 10);                \r\n        }\r\n         else {\r\n            score -= (100 * 5) + ((distance - 100) * 15);\r\n        }\r\n        return Math.max(Math.round(score), 0); // Zorg dat de score niet negatief wordt\r\n    }\r\n\r\n    // Zoekknop event listener (bestaand script aanpassen)\r\n    if (!searchButton) {\r\n        console.error(\"❌ Zoekknop ontbreekt!\");\r\n    } else {\r\n        searchButton.addEventListener('click', () => {\r\n    \r\n            if (selectedCoordinates && streetViewStartCoordinates) {\r\n                const distance = calculateDistance(streetViewStartCoordinates, selectedCoordinates);\r\n                const searchTime = stopTimer();\r\n                const score = calculateScore(distance);\r\n\r\n            // Redirect naar resultaat.html met alle gegevens\r\n                window.location.href = `/resultaat?distance=${distance.toFixed(2)}&startLat=${streetViewStartCoordinates.lat}&startLng=${streetViewStartCoordinates.lng}&selectedLat=${selectedCoordinates.lat}&selectedLng=${selectedCoordinates.lng}&time=${searchTime}&score=${score}`;\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n        if (!apiKey) {\r\n            console.error(\"Google Maps API Key is niet ingesteld!\");\r\n        } else {\r\n            console.log(\"Google Maps API Key geladen:\", apiKey);\r\n        } // Log the API key to check if it's loaded correctly\r\n        loadGoogleMapsScript(() => {\r\n            initMap();\r\n        });\r\n\r\n        return () => {\r\n            const script = document.getElementById('googleMaps');\r\n            if (script) {\r\n              document.body.removeChild(script);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"timer-container\">\r\n                Tijd over: <span id=\"timer\">2:30</span>\r\n            <div className=\"progress-bar\">\r\n                <span id=\"progress-bar-fill\"></span>\r\n            </div>\r\n            </div>\r\n                <div id=\"street-view\"></div>\r\n                    <button id=\"search-button\">Bekijk Afstand</button>\r\n                    <div id=\"map-container\" className=\"collapsed\">\r\n                <div id=\"toggle-map\">▲</div>\r\n            <div id=\"map\"></div>\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Locatie;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}